{"version":3,"sources":["components/Book.js","components/Books.js","App.js","serviceWorker.js","index.js"],"names":["Book","props","className","src","image","class","name","author","count","id","Books","useState","books","setBooks","useEffect","fetch","method","headers","then","response","json","data","returnedData","console","log","catch","error","map","book","authors","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kQAqBeA,G,KAlBF,SAACC,GACV,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKF,EAAMG,MAAOC,MAAM,gBAC7B,uBAAGH,UAAU,cACb,yBAAKA,UAAU,aACX,0CADJ,IACwB,2BAAID,EAAMK,MAC9B,uCAFJ,IAEqB,2BAAIL,EAAMM,QAC3B,2CAHJ,IAGyB,2BAAIN,EAAMO,OAC/B,2BAAIP,EAAMQ,SCqCfC,EA9CD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEYF,mBAAS,IAFrB,gCAGUA,mBAAS,IAHnB,6BAwBhB,OAnBAG,qBAAU,WAONC,MAAM,2CAA4C,CAC9CC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAE1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACH,IAAIC,EAAeD,EACnBE,QAAQC,IAAIF,GACZT,EAASS,MAEZG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,QACjC,IAEC,yBAAKxB,UAAU,WACX,0CAEA,yBAAKA,UAAU,UACX,0CAEJ,yBAAKA,UAAU,aACVU,EAAMe,KAAI,SAAAC,GACP,OAAO,kBAAC,EAAD,CACHxB,MAAO,wGACPE,KAAMsB,EAAKtB,KACXC,OAAQqB,EAAKC,QACbN,QAASK,EAAKpB,MACdC,GAAImB,EAAKnB,WC/BlBqB,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCMc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMoB,c","file":"static/js/main.133167da.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst Book = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"card\">\r\n                <img src={props.image} class=\"card__image\" />\r\n                <p className=\"card_name\"></p>\r\n                <div className=\"book-info\">\r\n                    <h4>Book Name:</h4> <p>{props.name}</p>\r\n                    <h4>Author:</h4> <p>{props.author}</p>\r\n                    <h4>Book Count:</h4> <p>{props.count}</p>\r\n                    <p>{props.id}</p>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Book;\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Book from './Book'\r\n\r\nconst Books = () => {\r\n    const [books, setBooks] = useState([])\r\n    const [author, setAuthor] = useState('')\r\n    const [count, setCount] = useState(0)\r\n\r\n    useEffect(() => {\r\n        // axios.get('https://anapioficeandfire.com/api/books/')\r\n        //     .then((response) => {\r\n        //         console.log(response.data);\r\n        //         const returnedData = response.data\r\n        //         setData(returnedData)\r\n        //     });\r\n        fetch('https://anapioficeandfire.com/api/books/', {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        })\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                let returnedData = data;\r\n                console.log(returnedData);\r\n                setBooks(returnedData)\r\n            })\r\n            .catch(error => console.log(error))\r\n    }, [])\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h2>IceandFire</h2>\r\n\r\n            <div className=\"header\">\r\n                <h1>All Books</h1>\r\n            </div>\r\n            <div className=\"all-books\">\r\n                {books.map(book => {\r\n                    return <Book\r\n                        image={\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSOZnH2KXR03ElpwIqgYlI07EiQwg7OinBYkA&usqp=CAU\"}\r\n                        name={book.name}\r\n                        author={book.authors}\r\n                        console={book.count}\r\n                        id={book.id}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Books;","import React from 'react';\nimport './App.css';\nimport Books from './components/Books'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Books />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}